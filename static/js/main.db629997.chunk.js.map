{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","props","loading","posts","className","map","post","title","id","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","totalPages","i","pageNumber","href","onClick","App","useState","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","response","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPostsArr","slice","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAyBeA,EAvBD,SAACC,GAEX,GADgBA,EAAMC,QAEpB,OACE,4CAGJ,IAAMC,EAAMF,EAAME,MAClB,OAEI,oBAAIC,UAAU,aAAd,SAEQD,EAAME,KAAI,SAACC,GACP,OAAO,oBAAIF,UAAU,kBAAd,SACH,6BAAKE,EAAKC,SAD8BD,EAAKE,UCbxDC,EAAa,SAAC,GAGvB,IAHiE,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SAC5CC,EAAc,GACdC,EAAaH,EAAWD,EACtBK,EAAE,EAAEA,EAAED,EAAWC,IAErBF,EAAYE,EAAE,GAAKA,EAEvB,OACI,8BACI,oBAAIX,UAAU,aAAd,SACCS,EAAYR,KAAI,SAACW,GACd,OAAO,oBAAIZ,UAAU,YAAd,SAA0B,mBAAGa,KAAK,KAAIb,UAAU,YAAYc,QAAS,kBAAIN,EAASI,IAAxD,SAAsEA,cCuBxGG,MA/Bf,WACA,MAA0BC,mBAAS,IAAnC,mBAAOjB,EAAP,KAAckB,EAAd,KACA,EAA8BD,oBAAS,GAAvC,mBAAOlB,EAAP,KAAgBoB,EAAhB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAuBJ,mBAAS,IAAzBV,EAAP,oBACAe,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,6DACjBJ,GAAW,GADM,SAEMK,IAAMC,IAAI,8CAFhB,OAEXC,EAFW,OAGjBR,EAASQ,EAASC,MAClBR,GAAW,GAJM,2CAAH,qDAMhBS,KACA,IAKF,IAAMC,EAAkBT,EAAcb,EAChCuB,EAAmBD,EAAkBtB,EACrCwB,EAAkB/B,EAAMgC,MAAMF,EAAkBD,GAEpD,OACE,sBAAK5B,UAAU,YAAf,UACE,2CACA,cAAC,EAAD,CAAOA,UAAU,MAAKD,MAAQ+B,EAAiBhC,QAASA,IACxD,cAAC,EAAD,CAAYQ,aAAcA,EAAcC,WAAYR,EAAMiC,OAAQxB,SAZxE,SAAkBI,GAChBQ,EAAeR,UCRFqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.db629997.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Posts = (props) => {\r\n    const loading = props.loading;\r\n    if(loading)\r\n    { return (\r\n        <h2>Loading...</h2>\r\n    );\r\n    }\r\n    const posts=props.posts;\r\n    return (\r\n        \r\n        <ul className=\"list-group\">\r\n            {\r\n                posts.map((post)=>{\r\n                    return <li className=\"list-group-item\" key={post.id}>\r\n                        <h2>{post.title}</h2>\r\n                    </li>\r\n                })\r\n            }\r\n\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\n\r\nexport const Pagination = ({postsPerPage, totalPosts, paginate}) => {\r\n    const pageNumbers = [];\r\n    const totalPages = totalPosts/postsPerPage;\r\n    for(let i=1;i<totalPages;i++)\r\n    {\r\n        pageNumbers[i-1] = i;\r\n    }\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n            {pageNumbers.map((pageNumber)=>{\r\n                return(<li className=\"page-item\"><a href=\"./\"className=\"page-link\" onClick={()=>paginate(pageNumber)}>{pageNumber}</a></li>)\r\n            })\r\n             }\r\n            </ul>          \r\n        </nav>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Posts from './components/Posts';\nimport { Pagination } from './components/Pagination';\nfunction App() {\nconst [posts, setPosts] = useState([]);\nconst [loading, setLoading] = useState(false);\nconst [currentPage, setCurrentPage] = useState(1);\nconst [postsPerPage] = useState(10);\nuseEffect(()=>{\n  const fetchPosts = async ()=>{\n    setLoading(true);\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n    setPosts(response.data);\n    setLoading(false);\n  };\n  fetchPosts();\n},[])\nfunction paginate(pageNumber){\n  setCurrentPage(pageNumber);\n}\n//get array of posts for each page\nconst indexOfLastPost = currentPage * postsPerPage;\nconst indexOfFirstPost = indexOfLastPost - postsPerPage;\nconst currentPostsArr = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  return (\n    <div className=\"container\">\n      <h1>Test Blog</h1>\n      <Posts className=\"row\"posts= {currentPostsArr} loading={loading} />\n      <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}